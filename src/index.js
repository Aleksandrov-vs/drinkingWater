TelegramBot = require('node-telegram-bot-api');
config = require('../config.json');
Database = require('./database');
const inlineKeyboards = require('../appearance/keyboard/inline_keyboards');
const callbackQueryChoiceGender = require('./processing_callback_query/choiceGender')
const callbackQueryChoiceInterval = require('./processing_callback_query/choiceInterval')
const callbackQueryChoiceDrink = require('./processing_callback_query/choiceDrink')
const callbackQueryChangeUserInf = require('./processing_callback_query/changeUserInf')
const authentication = require('./Stage/authencticatoin')
const createUserInfMsg = require('../appearance/templates/userInfMsg')
const createUserStatisticsMsg = require('../appearance/templates/userStatisticsMsg')
const createNotificationsList = require('../appearance/templates/notitficationsListMsg')
const drinkLiquids = require('./Stage/drinkLiquids')
const deleteNotification = require('./Stage/deleteNotification')
const addNotification = require('./Stage/addNotification')
const changeRequiredVolume = require('./Stage/changeRequiredVolume')
const getUsersList = require('./getUsersList')
const workingWithUser = require('./Stage/workingWithUser')
const menu = require('../appearance/keyboard/menu')
const utils = require('./utils')

// —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new TelegramBot(config.token, { polling: {
        interval:300,
        autoStart: true,
        params:{
            timeout: 10,
        }
    }
});
//–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const db = new Database(config.databaseURL);
const today = new Date();




bot.onText(/\/start/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name
    if(await db.userExists(userId)){
        await bot.sendMessage(chatId, '—Ç—ã —É–∂–µ —Ç—É—Ç')
    } else {
        const keyboard = inlineKeyboards.choice_gender
        const keyboardJSON = JSON.stringify({inline_keyboard: keyboard})
        await db.createSession(userId)
        await db.updateUserRequest(userId, 'user_name', userName)
        const text = `–ü—Ä–∏–≤–µ—Ç, <b>${userName}</b> —Ç–µ–ø–µ—Ä—å —è –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ \n\n` +
            '–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Å –≤–æ–¥–Ω–æ-—Å–æ–ª–µ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ \n\n' +
            '<b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º:</b>\n\n' +
            'üíß–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –∑–∞ —Å—É—Ç–∫–∏ \n' +
            'üíß–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –≤ –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É\n' +
            'üíß—Å–ª–µ–¥–∏—Ç—å –∑–∞ –≥–∏–¥—Ä–æ –±–∞–ª–∞–Ω—Å–æ–º –∏—Å—Ö–æ–¥—è –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n\n\n' +
            '<i>*–ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã</i>'
        await bot.sendMessage(chatId, text, {parse_mode: "HTML"})
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π <u>–ø–æ–ª</u>', {
            reply_markup: keyboardJSON,
            parse_mode: 'HTML'
        })
    }
});

bot.onText(/\/disconnect/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    if(await db.userExists(userId)) {
        await db.deleteUser(userId)
        await bot.sendMessage(chatId, '–≤—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –±–æ—Ç–∞. –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏—Ç–µ /start')
    } else{
        await bot.sendMessage(chatId, '–≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ /start')
    }
});


// –æ—Ç–ª–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
bot.on('callback_query', async (msg) => {
    const chatId = msg.message.chat.id;
    const userId = msg.from.id;
    const callback_query = msg.data.split('_')
    const command = callback_query[0]
    const msg_id = msg.message.message_id

    if (command === 'choiceGender') {
        await callbackQueryChoiceGender(userId, chatId, bot, db, callback_query, msg_id)
    } else if (command === 'choiceInterval'){
        await callbackQueryChoiceInterval(userId, chatId, bot, db, callback_query, msg_id)
    } else if(command === 'choiceDrink'){
        await callbackQueryChoiceDrink(userId, chatId, bot, db, callback_query, msg_id)
    } else if(command === 'changeUserInf'){
        await callbackQueryChangeUserInf(userId, chatId, bot, db, msg)
    } else if(command === 'disableNotif'){

        await db.updateNotifStatusForUser(userId, false)
        const keyboardJSON = JSON.stringify({inline_keyboard:  inlineKeyboards.createInfMsgKeyboard(false)})
        await bot.editMessageReplyMarkup(keyboardJSON, {chat_id: chatId, message_id: msg_id})

    } else if(command === 'enableNotif'){
        await db.updateLateStatusForUser(userId, false)
        await db.updateNotifStatusForUser(userId, true)
        const keyboardJSON = JSON.stringify({inline_keyboard:  inlineKeyboards.createInfMsgKeyboard(true)})
        await bot.editMessageReplyMarkup(keyboardJSON, {chat_id: chatId, message_id: msg_id})

    } else if(command === 'deleteNotif'){
        await bot.sendMessage(chatId, '–≤–≤–µ–¥–∏—Ç–µ ID —Ñ—Ä–∞–∑—ã, –¥–ª—è –µ–µ —É–¥–∞–ª–µ–Ω–∏—è')
        await db.updateSession(userId, 'Stage', 'deleteNotif')
        await db.updateSession(userId, 'deleteNotif', 'wait_id')
    } else if(command === 'changeRequiredVolume'){

        await bot.sendMessage(chatId, '—É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ —Å—É—Ç–∫–∏')
        await db.updateSession(userId, 'Stage', 'changeRequiredVolume')
        await db.updateSession(userId, 'changeRequiredVolume', 'wait_volume')

    } else if(command === 'addNotif'){

        const keyboardJSON = JSON.stringify({inline_keyboard: inlineKeyboards.choice_part_day})
        await bot.sendMessage(chatId, '–≤—ã–±–∏—Ä–µ—Ç–µ –≥—Ä—É–ø–ø—É  –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É', {reply_markup: keyboardJSON})
        await db.updateSession(userId, 'Stage', 'changeRequiredVolume')
        await db.updateSession(userId, 'changeRequiredVolume', 'wait_volume')

    } else if(command === 'addToGroup'){
        await bot.sendMessage(chatId, '–≤–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É')
        await db.updateUserRequest(userId, 'part_day', `${callback_query[1]}`)
        await db.updateSession(userId, 'Stage', 'addNotif')
        await db.updateSession(userId, 'addNotif', 'wait_text')

    }
});

bot.onText(/\/login (.+)/,async (msg, [source, token]) =>{

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userExist = await db.userExists(userId);
    if(userExist){
        if(token === config.authToken){
            await db.createAdmin(userId)
            await bot.sendMessage(chatId, '—Ç–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω', {reply_markup: menu.mainMenuAdmin.reply_markup })
        } else {
            await bot.sendMessage(chatId, '–≤–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–µ–Ω')
        }
    } else{
        await bot.sendMessage(chatId, ' –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    }

});



bot.onText(/–º–æ–∏ –¥–∞–Ω–Ω—ã–µ(?!.+)/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if(await db.userExists(userId)){
        const userData = await db.getUserInf(userId)
        const notifStatus = await db.getNotificationStatus(userId)
        let text = await createUserInfMsg(userData)
        const keyboardJSON = JSON.stringify({inline_keyboard: inlineKeyboards.createInfMsgKeyboard(notifStatus)})
        await bot.sendMessage(chatId, text, {reply_markup: keyboardJSON, parse_mode: 'HTML'})
    } else {
        await bot.sendMessage(chatId, '–≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    }
    // await createUserInfMsg()

});

bot.onText(/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏(?!.+)/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    if (await db.isAdmin(userId)){
        const session = await db.getSession(userId)
        await getUsersList(bot, userId, chatId, msg, session, db)

    } else {
        await bot.sendMessage(chatId, '–≤—ã –Ω–µ admin')
    }
});


bot.onText(/–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(?!.+)/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    if(await db.userExists(userId)) {
        const userData = await db.getUserInf(userId)
        const userStatistics = await db.getUserStatistics(userId)
        let text = createUserStatisticsMsg(userStatistics)

        await bot.sendMessage(chatId, text, {parse_mode: "HTML"})
    } else {
        await bot.sendMessage(chatId, '–≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    }


});

bot.onText(/–∏–∑–º–µ–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã(?!.+)/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if(await db.isAdmin(userId)){
        const text = await createNotificationsList(db)

        const keyboardJSON = JSON.stringify({inline_keyboard: inlineKeyboards.change_notifications})
        await bot.sendMessage(chatId, text, {parse_mode: "HTML", reply_markup: keyboardJSON})
    } else {
        await bot.sendMessage(chatId, '–≤—ã –Ω–µ –∞–¥–º–∏–Ω')
    }



});


bot.onText(/üíß(?!.+)/, async msg => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (await db.userExists(userId)){
        const keyboardJSON = JSON.stringify({inline_keyboard: inlineKeyboards.choice_drink})
        await bot.sendMessage(chatId, '–≤—ã–±–∏—Ä–µ—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫', {reply_markup: keyboardJSON})
    } else {
        await bot.sendMessage(chatId, '–≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    }
});


// —Ö–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–∏–≥—É—Ä—É—é—â–∏–π –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫—Ä–æ–º–µ –∫–æ–º–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
bot.onText(/^(?!\/)^(?!üíß)^(?!–º–æ–∏ –¥–∞–Ω–Ω—ã–µ)^(?!–º–æ—è —Å–∞—Ç–∏—Å—Ç–∏–∫–∞)^(?!—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)^(?!–∏–∑–º–µ–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã)/, async msg => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (await db.sessionExists(userId)) {
        const session = await db.getSession(userId)
        const Stage = session.Stage

        if (Stage === 'Auth') {
            await authentication(bot, userId, chatId, msg, session, db)
        } else if (Stage === 'choiceDrink'){
            await drinkLiquids(bot, userId, chatId, msg, session, db)
        } else if (Stage === 'changeRequiredVolume'){
            await changeRequiredVolume(bot, userId, chatId, msg, session, db)
        }else if (Stage === 'deleteNotif'){
            await deleteNotification(bot, userId, chatId, msg, session, db)
        }else if (Stage === 'addNotif'){
            await addNotification(bot, userId, chatId, msg, session, db)
        } else if (Stage === 'choiceUserchoiceUser'){
            if(await db.isAdmin(userId)){
                await workingWithUser(bot, userId, chatId, msg, session, db)
            } else {
                await bot.sendMessage(chatId, '–≤—ã –Ω–µ admin')
            }
        }

    } else {
        await db.createSession(userId)
    }
});

//–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ notifications_interval –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É
async function sendNotifLateUser(user_id){
    const userInf = await db.getAllTodayDataForUser(user_id)
    const now = new Date()
    const nowMilsek = new Date().getTime()
    const notifStatus = await db.getNotificationStatus(user_id)


    if((userInf.last_drinking_date/1000) + (userInf.notification_interval*3600) <= nowMilsek/1000 && notifStatus && !userInf.completed_norm){
        const now = new Date()
        const hours = now.getHours()
        let notification = '–Ω–æ—á—å'

        if (config["time interval_afternoon"].start < hours && hours < config["time interval_afternoon"].start) {

            const notifications = await db.getAllNotificationsForPartDay('morning')
            const numberNotif = utils.getRandomInt(0, notifications.length - 1)
            notification = notifications[numberNotif].text

        } else if (config["time interval_afternoon"].start <= hours && hours < config["time interval_afternoon"].end) {

            const notifications = await db.getAllNotificationsForPartDay('afternoon')
            const numberNotif = utils.getRandomInt(0, notifications.length - 1)
            notification = notifications[numberNotif].text

        } else if (config["time interval_evening"].start <= hours && hours < config["time interval_evening"].end) {

            const notifications = await db.getAllNotificationsForPartDay('evening')
            const numberNotif = utils.getRandomInt(0, notifications.length - 1)
            notification = notifications[numberNotif].text

        }
        const chatId = await db.getUserChatId(user_id)
        await bot.sendMessage(chatId, notification)
        setTimeout(async () => {
            await sendNotifLateUser(user_id)
        },  userInf.notification_interval * 60 * 60 * 1000)
    }
}

//–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–æ—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
setInterval(async () => {
    const now = new Date()
    const nowMilsek = new Date().getTime()
    const hours =  now.getHours()
    if (config.time_interval_send_notif.start <= hours && hours <= config.time_interval_send_notif.end) {
        const userIDs = await db.getLaterUsers(nowMilsek)
        for (let item in userIDs) {
            const user_id = userIDs['user_id']
            await db.updateLateStatusForUser(user_id, true)
            await sendNotifLateUser(user_id)
        }
    }
}, (5 * 1000));


//—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ statistics
async function createStatistics() {
    const userIDs = await db.getAllUsersIds()
    const now = new Date()
    const hours =  now.getHours()
    const minutes = now.getMinutes()
    let date_today = utils.formatDate(now)
    for (let item of userIDs) {
        let user_id = item['user_id']
        await db.updateLateStatusForUser(user_id, false)
        await db.addUserStatistics(user_id, date_today)
    }

    setTimeout(async () => {
        await createStatistics()
    },  (24*60 - (hours*60 + minutes)) * 60 * 1000)
}
createStatistics().then(res =>{console.log('done')})

